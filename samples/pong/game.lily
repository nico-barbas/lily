import std
import rl

type Game is class
    x: number
    y: number
    ax: number
    ay: number
    w: number
    h: number

    ball: Vector
    velocity: Vector

    playerScore: number
    aiScore: number
    pStr: string
    aStr: string

    constructor new():
        self.x = 20
        self.y = 100
        self.ax = 800 - 30
        self.ay = 100
        self.w = 10
        self.h = 100
        self.ball = Vector.new(400, 300)
        self.velocity = Vector.new(std.rand(), std.randRange(-0.5, 0.5))
        self.velocity.normalize()

        self.playerScore = 0
        self.aiScore = 0
        self.pStr = std.toString(self.playerScore)
        self.aStr = std.toString(self.aiScore)
    end

    fn updateBall(dt: number):
        var scaledSpeed = speed * dt
        var nextX = self.ball.x + (self.velocity.x * scaledSpeed)
        var nextY = self.ball.y + (self.velocity.y * scaledSpeed)
        
        if nextY <= 0 or nextY >= 600:
            self.velocity.y = -self.velocity.y
            return
        end 
        if nextX <= 0 or nextX >= 800:
            self.restart(nextX >= 800)
            return
        end

        if nextX >= self.x and nextX <= self.x + self.w:
            if nextY >= self.y and nextY <= self.y + self.h:
                self.velocity.x = -self.velocity.x
                return
            end
        end
        if nextX >= self.ax and nextX <= self.ax + self.w:
            if nextY >= self.ay and nextY <= self.ay + self.h:
                self.velocity.x = -self.velocity.x
                return
            end
        end
        self.ball.x = nextX
        self.ball.y = nextY
    end

    fn updateAI(dt: number):
        self.ay = self.ball.y
    end

    fn restart(playerWin: bool):
        if playerWin:
            self.playerScore = self.playerScore + 1
            self.pStr = std.toString(self.playerScore)
        else:
            self.aiScore = self.aiScore + 1
            self.aStr = std.toString(self.aiScore)
        end
        self.ball.x = 400
        self.ball.y = 300
        self.velocity.x = std.rand()
        self.velocity.y = std.randRange(-0.5, 0.5)
        self.velocity.normalize()
    end
end

type Vector is class
    x: number
    y: number

    constructor new(_x: number, _y: number):
        self.x = _x
        self.y = _y
    end

    fn normalize():
        var len = std.sqrt((self.x * self.x) + (self.y * self.y))
        self.x = self.x / len
        self.y = self.y / len
    end
end

var game = Game.new()
var speed = 250

fn update(dt: number):
    if rl.isKeyDown("w"):
        game.y = game.y - (speed * dt)
    end
    if rl.isKeyDown("s"):
        game.y = game.y + (speed * dt)
    end
    game.updateBall(dt)
    game.updateAI(dt)
end

var clr = rl.Color.new(255, 255, 255, 255)

fn draw():
    rl.drawText(game.pStr, 0, 0, 32, clr)
    rl.drawText(game.aStr, 700, 0, 32, clr)
    rl.drawRectangle(game.x, game.y, game.w, game.h, clr)
    rl.drawRectangle(game.ax, game.ay, game.w, game.h, clr)
    rl.drawRectangle(game.ball.x, game.ball.y, 10, 10, clr)
end