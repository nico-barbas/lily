-- 64bits floats are the only supported number type 
var a: number = 2.4

-- The type here is infered at compile time
var b = 10 

-- More builtin types
var b: bool = false
var str = "Hello world!"
var char = 'a'
-- Arrays are dynamically allocated, can resize,
-- and are passed by reference 
var arr = array of number[10, 2, 3, 4]
-- Maps are dynamically allocated, can resize,
-- and are passed by reference 
var m = map["hi" = 10, "hello" = 2]

-- Control flow
-- If
if a == 2.4:
    print(a)
end

if a < 2.4:
    print(a)
else:
    print(b)
end

-- Loops
var i = 0
for:
    if i == 10:
        break
    end 
    print("Hi!")
    i += 1
end
for j in 0..10:
    print("Hello :)")
end
-- There is builtin iterators for array and map types
for element, i in arr:
    print(element, i)
end

-- This is a function declaration
-- "result" is automatically created when entering a function's scope
-- and it is the returned value from the function 
fn add(a: number, b: number): number
    result = a + b
end

--
-- These are a user defined type declarations
--

-- It is however possible to define custom number types
-- by either specifying a range, or using the distinct keyword
type ExlusiveRange is range 1..100
type InclusiveRange is range 1...100
type MyNumber is distinct number

-- Classes are dynamically allocated and passed by reference
type Animal is class
    name: string
    size: number

    constructor Animal(n: string):
        name = n
    end
end

-- And lastly, you can define interfaces
-- A class implementing an interface is implicit (like Go, but this is subject to change) 
type Writer is interface
    fn write(s: string)
end